name: Deploy to GitHub Pages

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-20.04  # Use older Ubuntu for better stdweb compatibility
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.70.0  # Use a known working version with stdweb
          targets: wasm32-unknown-unknown
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-1.70-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-web
        run: |
          # Install specific version of cargo-web that works with this project
          cargo install cargo-web --version 0.6.26
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Build pinky-web with cargo-web
        run: |
          cd pinky-web
          # Use cargo-web build which handles stdweb properly
          cargo web build --release || {
            echo "cargo-web build failed, trying alternative approach..."
            
            # Alternative: try with different settings
            cargo web build --release --target wasm32-unknown-unknown || {
              echo "Alternative build also failed, trying basic cargo build..."
              
              # Last resort: basic cargo build and manual JS generation
              cargo build --release --target wasm32-unknown-unknown || exit 1
              
              # Create a minimal JS shim for basic WASM loading
              mkdir -p target/deploy
              cat > target/deploy/pinky-web.js << 'EOF'
          // Basic WASM loader for pinky-web
          (function() {
              if (typeof WebAssembly !== 'object') {
                  document.getElementById('unsupported').className = '';
                  document.getElementById('loading').className = 'hidden';
                  return;
              }
              
              // This is a placeholder - the actual app.js should be generated by cargo-web
              console.log('WASM support detected, but cargo-web generated JS is missing');
              console.log('Please check the build process');
              
              document.getElementById('error').className = '';
              document.getElementById('loading').className = 'hidden';
              document.getElementById('error-description').textContent = 'Build incomplete - cargo-web JS generation failed';
          })();
          EOF
              
              # Copy WASM file if it exists
              find ../target -name "*.wasm" -exec cp {} target/deploy/ \; || true
            }
          }
      
      - name: Prepare site files
        run: |
          mkdir -p _site
          
          # Copy all static files first
          cp -r pinky-web/static/* _site/
          
          # Create js directory if it doesn't exist
          mkdir -p _site/js
          
          # cargo-web creates output in target/deploy directory by default
          if [ -d "pinky-web/target/deploy" ]; then
            echo "Found deploy directory:"
            ls -la pinky-web/target/deploy/
            
            # Copy JS file to expected location
            if [ -f "pinky-web/target/deploy/pinky-web.js" ]; then
              cp pinky-web/target/deploy/pinky-web.js _site/js/app.js
              echo "✓ Copied pinky-web.js to app.js"
            else
              echo "Looking for alternative JS files..."
              find pinky-web/target/deploy -name "*.js" -exec cp {} _site/js/app.js \; -quit || {
                echo "✗ No JS file found in deploy directory"
                # Create error page JS
                cat > _site/js/app.js << 'EOF'
          console.error('Pinky web build failed - no generated JavaScript found');
          document.getElementById('error').className = '';
          document.getElementById('loading').className = 'hidden';
          document.getElementById('error-description').textContent = 'WebAssembly build incomplete';
          EOF
              }
            fi
            
            # Copy WASM files
            find pinky-web/target/deploy -name "*.wasm" -exec cp {} _site/ \;
            
            # Copy any other assets from deploy
            find pinky-web/target/deploy -type f ! -name "*.js" ! -name "*.wasm" -exec cp {} _site/ \; || true
          else
            echo "No deploy directory found. Checking other locations..."
            find pinky-web/target -name "*.js" -o -name "*.wasm" | head -10
            
            # Try to find and copy JS files to expected location
            find pinky-web/target -name "*.js" -exec cp {} _site/js/app.js \; -quit || {
              echo "Creating fallback JS file..."
              cat > _site/js/app.js << 'EOF'
          console.error('Pinky web build incomplete - no JavaScript generated');
          document.getElementById('error').className = '';
          document.getElementById('loading').className = 'hidden';  
          document.getElementById('error-description').textContent = 'Build failed - please check the GitHub Actions logs';
          EOF
            }
            find pinky-web/target -name "*.wasm" -exec cp {} _site/ \; -quit || echo "No WASM file found"
          fi
          
          # Verify the final structure
          echo "Final _site contents:"
          find _site -type f | sort
          
          # Check if app.js exists and show its size
          if [ -f "_site/js/app.js" ]; then
            echo "✓ app.js found:"
            ls -la _site/js/app.js
            echo "First few lines of app.js:"
            head -5 _site/js/app.js
          else
            echo "✗ app.js missing - creating emergency fallback"
            mkdir -p _site/js
            echo 'console.error("Build failed");' > _site/js/app.js
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4